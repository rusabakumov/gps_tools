function loadJson(filename, callback) {
    var xobj = new XMLHttpRequest();
        xobj.overrideMimeType("application/json");

    xobj.open('GET', filename, true);
    xobj.onreadystatechange = function () {
          if (xobj.readyState == 4 && xobj.status == "200") {
            // Required use of an anonymous callback as .open will NOT return a value but simply returns undefined in asynchronous mode
            callback(JSON.parse(xobj.responseText));
          }
    };
    xobj.send(null);
}

var series = [];

loadJson('data.json', buildGraph);

function tooltipFormatter() {
    first = this.points[0];
    str = '<b>dist:</b> ' + first.x.toFixed(2) + '</br><b>idx:</b> ' + first.point.idx +
        '</br><b>time:</b> ' + formatDuration(first.point.micros);

    this.points.forEach(function (point) {
        value = '<b>' + point.series.name + '</b>: ' + point.point.y.toFixed(2);
        str = str + '</br>' + value;
    })

    return str
}

function formatDuration(micros) {
    minutes = Math.floor(micros / 60000000);
    seconds = Math.floor(micros % 60000000 / 1000000);
    millis = Math.round(micros % 1000000 / 100000);
    return formatInt(minutes, 2) + ':' + formatInt(seconds, 2) + '.' + formatInt(millis, 1);
}

function formatInt(num, length) {
    var r = "" + num;
    while (r.length < length) {
        r = "0" + r;
    }
    return r;
}

function buildGraph(data) {
    series = data.tracks;
    names = [];

    // Adding series params and constructing name
    series.forEach(function(track, i, arr) {
        names.push(track.name)
        track.lineWidth = track.line_width;
        track.turboThreshold = 0;
    });


    Highcharts.setOptions({
        colors: ['#002eff', '#f44b42', '#3ee866', '#ddcf30', '#24CBE5', '#2c6633', '#45215b', '#FFF263', '#6AF9C4']
    });

    Highcharts.chart('container', {

        chart: {
//            backgroundColor: '#2b3a38',
            zoomType: 'x'
        },

        title: {
            text: "Select reference point index!"
        },

        subtitle: {
            text: names.join(' vs ')
        },

        tooltip: {
            useHTML: true,
            formatter: tooltipFormatter,
            valueDecimals: 2,
            valueSuffix: ' kph',
            shared: true,
            crosshairs: true
        },

        xAxis: {
            title: {
                text: 'Distance from start (km)'
            },
            type: 'linear',
        },

        yAxis: {
            title: {
                text: 'Speed (kph)'
            }
        },

        series: series,

        plotOptions: {
            line: {
                allowPointSelect: true,
                tooltip: {
                }
            }
        },

        credits: {
            enabled: false
        },

        exporting: {
            enabled: false
        }
    });
}
