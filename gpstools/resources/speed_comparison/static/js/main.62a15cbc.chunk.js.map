{"version":3,"sources":["utils.js","StatsTable.js","App.js","serviceWorker.js","index.js"],"names":["formatDuration","micros","minutes","Math","floor","seconds","millis","round","formatInt","num","length","r","StatsTable","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","selected_track","_this2","track_diffs","sector_durations","sector_diffs","reference_track","tracks","forEach","track","id","reference_sector_duration","sector","getSectorDuration","formatDurationDiff","duration","sector_duration","track_index","rows","map","react_default","a","createElement","StatsTable_TrackRow","key","idx","track_duration_diff","selected","sector_duration_diff","handleRowSelection","bind","className","Table_default","striped","bordered","size","left_micros","left_min_dist","Number","MAX_VALUE","right_micros","right_min_dist","data","point","dist_left","abs","x","left","dist_right","right","durationDiff","track_id","setState","Component","TrackRow","classStr","onClick","event","scope","name","max_speed","toFixed","avg_speed","formatNonZeroDuration","number","App","loadJson","onLoadData","assertThisInitialized","i","arr","toString","document","title","chart","buildGraph","Container_default","Row_default","Col_default","src_StatsTable","filename","callback","console","log","xobj","XMLHttpRequest","overrideMimeType","open","onreadystatechange","readyState","status","JSON","parse","responseText","send","series","names","push","lineWidth","line_width","turboThreshold","Highcharts","setOptions","colors","zoomType","events","selection","selectionHandler","text","subtitle","join","tooltip","useHTML","formatter","tooltipFormatter","valueDecimals","valueSuffix","shared","crosshairs","xAxis","type","yAxis","plotOptions","line","allowPointSelect","credits","enabled","exporting","first","points","str","value","y","preventDefault","removePlotBand","addPlotBand","from","min","to","max","color","click","removeSector","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.62a15cbc.chunk.js","sourcesContent":["function formatDuration(micros) {\n    var minutes = Math.floor(micros / 60000000);\n    var seconds = Math.floor(micros % 60000000 / 1000000);\n    var millis = Math.round(micros % 1000000 / 100000);\n    return formatInt(minutes, 2) + ':' + formatInt(seconds, 2) + '.' + formatInt(millis, 1);\n}\n\nfunction formatInt(num, length) {\n    var r = \"\" + num;\n    while (r.length < length) {\n        r = \"0\" + r;\n    }\n    return r;\n}\n\nexport { formatDuration };\n\n","import React, { Component } from 'react';\n\nimport Table from 'react-bootstrap/Table';\nimport { formatDuration } from './utils';\n\nclass StatsTable extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      selected_track: null\n    }\n  }\n\n  render() {\n    // Calculate diffs on selected\n    const track_diffs = {};\n    const sector_durations = {};\n    const sector_diffs = {};\n    \n    if (this.state.selected_track != null) {\n      // Searching for reference track\n      let reference_track = null;\n      this.props.tracks.forEach(track =>{\n        if (track.id == this.state.selected_track) {\n          reference_track = track\n        }\n      })\n\n      let reference_sector_duration = null;\n      if (this.props.sector != null) {\n        reference_sector_duration = this.getSectorDuration(this.props.sector, reference_track);\n      }\n\n      this.props.tracks.forEach(track => {\n        if (track.id == reference_track.id) {\n          track_diffs[track.id] = '-';\n        } else {\n          track_diffs[track.id] = this.formatDurationDiff(track.duration - reference_track.duration);\n        }\n        if (this.props.sector != null) {\n          let sector_duration = this.getSectorDuration(this.props.sector, track);\n          sector_durations[track.id] = sector_duration;\n          if (sector_duration == 0 || track.id == reference_track.id) {\n            sector_diffs[track.id] = '-';\n          } else {\n            sector_diffs[track.id] = this.formatDurationDiff(\n              sector_duration - reference_sector_duration\n            )\n          }\n        }\n      })    \n    }\n\n    let track_index = 0;\n    let rows = this.props.tracks.map(track => {\n      track_index++;\n      return <TrackRow \n        key={track.id} \n        idx={track_index} \n        track={track}\n        track_duration_diff={track_diffs[track.id]}\n        selected={this.state.selected_track == track.id}\n        sector_duration={sector_durations[track.id]}\n        sector_duration_diff={sector_diffs[track.id]}\n        handleRowSelection={this.handleRowSelection.bind(this)}\n      />\n    });\n\n    return (\n      <div className=\"Table\">\n        <Table striped bordered size=\"sm\">\n          <thead>\n            <tr>\n              <th>#</th>\n              <th>Track</th>\n              <th>Time</th>\n              <th>Diff</th>\n              <th>Max speed</th>\n              <th>Avg speed</th>\n              <th>Sector time</th>\n              <th>Sector diff</th>\n            </tr>\n          </thead>\n          <tbody>\n            { rows }\n          </tbody>\n        </Table>\n      </div>\n    );\n  }\n\n  getSectorDuration(sector, track) {\n    let left_micros = 0;\n    let left_min_dist = Number.MAX_VALUE;\n\n    let right_micros = 0;\n    let right_min_dist = Number.MAX_VALUE;\n    track.data.forEach(point => {\n      const dist_left = Math.abs(point.x - sector.left);\n      if (dist_left < left_min_dist) {\n        left_min_dist = dist_left;\n        left_micros = point.micros;\n      }\n\n      const dist_right = Math.abs(point.x - sector.right);\n      if (dist_right < right_min_dist) {\n        right_min_dist = dist_right;\n        right_micros = point.micros;\n      }\n    })\n\n    return right_micros - left_micros;\n  }\n\n  formatDurationDiff(durationDiff) {\n    if (durationDiff > 0) {\n      return '+' + formatDuration(durationDiff);\n    } else {\n      return '-' + formatDuration(Math.abs(durationDiff));\n    }\n  }\n\n  handleRowSelection(track_id) {\n    if (this.state.selected_track == track_id) {\n      this.setState({selected_track: null})\n    } else {\n      this.setState({selected_track: track_id})\n    }\n  }\n}\n\nconst TrackRow = (props) => {\n  let classStr = \"\";\n  if (props.selected) {\n    classStr = \"table-primary\"\n  }\n  return (\n    <tr onClick={(event) => props.handleRowSelection(props.track.id)} className={classStr}>\n      <th scope=\"row\">{props.idx}</th>\n      <td>{props.track.name}</td>\n      <td>{formatDuration(props.track.duration)}</td>\n      <td>{props.track_duration_diff}</td>\n      <td>{props.track.max_speed.toFixed(2)}</td>\n      <td>{props.track.avg_speed.toFixed(2)}</td>\n      <td>{formatNonZeroDuration(props.sector_duration)}</td>\n      <td>{props.sector_duration_diff}</td>\n    </tr>\n  );\n}\n\nconst formatNonZeroDuration = number => {\n  if (number == 0 || number == null) {\n    return \"\"\n  } else {\n    return formatDuration(number)  \n  }\n}\n\nexport default StatsTable;\n","import React, { Component } from 'react';\nimport './App.css';\nimport { formatDuration } from './utils'\n\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport StatsTable from './StatsTable';\n\nimport Highcharts from 'highcharts';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      tracks: [],\n      sector: null\n    };\n\n    this.loadJson('./data.json', this.onLoadData.bind(this));\n  }\n\n  onLoadData(data) {\n    // Adding string id to each track\n    data.tracks.forEach(function(track, i, arr) {\n      track.id = i.toString();\n    });\n\n    document.title = data.title\n\n    const chart = this.buildGraph(data.tracks, data.title);\n\n    this.setState({\n      title: data.title,\n      tracks: data.tracks,\n      chart: chart\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Container>\n          <Row>\n            <Col id=\"graph\"/>\n          </Row>\n          <Row>\n            <Col><StatsTable tracks={this.state.tracks} sector={this.state.sector}/></Col>\n          </Row>\n        </Container>\n      </div>\n    )\n  }\n\n  loadJson(filename, callback) {\n    console.log('Loading graph data');\n    var xobj = new XMLHttpRequest();\n        xobj.overrideMimeType(\"application/json\");\n\n    xobj.open('GET', filename, true);\n    xobj.onreadystatechange = function () {\n          if (xobj.readyState == 4 && xobj.status == \"200\") {\n            // Required use of an anonymous callback as .open will NOT return a value but simply returns undefined in asynchronous mode\n            callback(JSON.parse(xobj.responseText));\n          }\n    };\n    xobj.send(null);\n  }\n\n  buildGraph(series, title) {\n    var names = [];\n\n    // Adding series params and constructing name\n    series.forEach(function(track, i, arr) {\n        names.push(track.name)\n        track.lineWidth = track.line_width;\n        track.turboThreshold = 0;\n    });\n\n\n    Highcharts.setOptions({\n        colors: ['#002eff', '#f44b42', '#3ee866', '#ddcf30', '#24CBE5', '#2c6633', '#45215b', '#FFF263', '#6AF9C4']\n    });\n\n    return Highcharts.chart('graph', {\n\n        chart: {\n            zoomType: 'x',\n            events: {\n                selection: this.selectionHandler.bind(this)\n            }\n        },\n\n        title: {\n            text: title\n        },\n\n        subtitle: {\n            text: names.join(' vs ')\n        },\n\n        tooltip: {\n            useHTML: true,\n            formatter: this.tooltipFormatter,\n            valueDecimals: 2,\n            valueSuffix: ' kph',\n            shared: true,\n            crosshairs: true\n        },\n\n        xAxis: {\n            title: {\n                text: 'Distance from start (km)'\n            },\n            type: 'linear',\n        },\n\n        yAxis: {\n            title: {\n                text: 'Speed (kph)'\n            }\n        },\n\n        series: series,\n\n        plotOptions: {\n            line: {\n                allowPointSelect: true,\n                tooltip: {\n                }\n            }\n        },\n\n        credits: {\n            enabled: false\n        },\n\n        exporting: {\n            enabled: false\n        }\n    });\n  }\n\n  tooltipFormatter() {\n      var first = this.points[0];\n      var str = '<b>dist:</b> ' + first.x.toFixed(2) + 'km</br><b>time:</b> ' + formatDuration(first.point.micros);\n\n      this.points.forEach(function (point) {\n          var value = '<b>' + point.series.name + '</b>: ' + point.point.y.toFixed(2) + 'kph ' + formatDuration(point.point.micros);\n          str = str + '</br>' + value;\n      })\n\n      return str\n  }\n\n  selectionHandler(event) {\n      event.preventDefault();\n      let xAxis = this.state.chart.xAxis[0];\n      // var text;\n      // if (event.xAxis) {\n      //     text = 'min: ' + Highcharts.numberFormat(event.xAxis[0].min, 2) + ', max: ' + Highcharts.numberFormat(event.xAxis[0].max, 2);\n      // } else {\n      //     text = 'Selection reset';\n      // }\n      // console.log(text);\n\n      // Drawing selection\n      xAxis.removePlotBand('mask');\n      xAxis.addPlotBand({\n          id: 'mask',\n          from: event.xAxis[0].min,\n          to: event.xAxis[0].max,\n          color: 'rgba(170, 203, 255, 0.4)',\n          events: {\n            'click': this.removeSector.bind(this)\n          }\n      });\n\n      // Updating sector data\n      this.setState({\n        sector: {\n          left: event.xAxis[0].min,\n          right: event.xAxis[0].max,\n        }\n      });\n  }\n\n  removeSector(event) {\n    this.state.chart.xAxis[0].removePlotBand('mask');\n    this.setState({\n      sector: null\n    });\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}