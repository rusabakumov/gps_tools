{"version":3,"sources":["utils.js","StatsTable.js","GoogleMap.js","TracksMap.js","SSComparison.js","serviceWorker.js","index.js"],"names":["formatDuration","micros","minutes","Math","floor","seconds","millis","round","formatInt","num","length","r","StatsTable","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","selected_track","_this2","track_diffs","sector_durations","sector_diffs","tracks","forEach","track","sector","id","getSectorDuration","reference_track","reference_sector_duration","finished","formatDurationDiff","duration","track_index","rows","map","react_default","a","createElement","StatsTable_TrackRow","key","idx","track_duration_diff","selected","sector_duration","sector_duration_diff","handleRowSelection","bind","className","Table_default","striped","bordered","size","left_micros","left_min_dist","Number","MAX_VALUE","right_micros","right_min_dist","data","point","dist_left","abs","x","left","dist_right","right","durationDiff","track_id","setState","Component","TrackRow","classStr","onClick","event","scope","name","max_speed","toFixed","avg_speed","formatNonZeroDuration","number","GoogleMap","isScriptLoaded","_ref","isScriptLoadSucceed","initMap","alert","renderMap","style","height","window","google","maps","Map","document","getElementById","zoom","center","lat","lng","mapTypeId","bounds","determineMapBounds","fitBounds","coords","push","lon","Polyline","path","geodesic","strokeColor","color","strokeOpacity","strokeWeight","setMap","initialPoint","LatLngBounds","extend","React","scriptLoader","TracksMap","loadJson","onLoadData","assertThisInitialized","i","arr","toString","Container_default","Row_default","Col_default","src_GoogleMap","filename","callback","console","log","xobj","XMLHttpRequest","overrideMimeType","open","onreadystatechange","readyState","status","JSON","parse","responseText","send","Boolean","location","hostname","match","ReactDOM","render","src_TracksMap","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a71b7dae.chunk.js","sourcesContent":["function formatDuration(micros) {\n    var minutes = Math.floor(micros / 60000000);\n    var seconds = Math.floor(micros % 60000000 / 1000000);\n    var millis = Math.round(micros % 1000000 / 100000);\n    return formatInt(minutes, 2) + ':' + formatInt(seconds, 2) + '.' + formatInt(millis, 1);\n}\n\nfunction formatInt(num, length) {\n    var r = \"\" + num;\n    while (r.length < length) {\n        r = \"0\" + r;\n    }\n    return r;\n}\n\nexport { formatDuration };\n\n","import React, { Component } from 'react';\n\nimport Table from 'react-bootstrap/Table';\nimport { formatDuration } from './utils';\n\nclass StatsTable extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      selected_track: null\n    }\n  }\n\n  render() {\n    // Calculate diffs on selected\n    const track_diffs = {};\n    const sector_durations = {};\n    const sector_diffs = {};\n    \n    this.props.tracks.forEach(track => {\n      if (this.props.sector != null) {\n        sector_durations[track.id] = this.getSectorDuration(this.props.sector, track);;\n      }\n    })\n\n    if (this.state.selected_track != null) {\n      // Searching for reference track\n      let reference_track = null;\n      this.props.tracks.forEach(track =>{\n        if (track.id == this.state.selected_track) {\n          reference_track = track\n        }\n      })\n\n      let reference_sector_duration = null;\n      if (this.props.sector != null) {\n        reference_sector_duration = sector_durations[reference_track.id]\n      }\n\n      this.props.tracks.forEach(track => {\n        if (track.id == reference_track.id) {\n          track_diffs[track.id] = '-';\n        } else if (!track.finished) {\n          track_diffs[track.id] = '-'\n        } else {\n          track_diffs[track.id] = this.formatDurationDiff(track.duration - reference_track.duration);\n        }\n        if (this.props.sector != null) {\n          if (sector_durations[track.id] == 0 || track.id == reference_track.id) {\n            sector_diffs[track.id] = '-';\n          } else {\n            sector_diffs[track.id] = this.formatDurationDiff(\n              sector_durations[track.id] - reference_sector_duration\n            )\n          }\n        }\n      })    \n    }\n\n    let track_index = 0;\n    let rows = this.props.tracks.map(track => {\n      track_index++;\n      return <TrackRow \n        key={track.id} \n        idx={track_index} \n        track={track}\n        track_duration_diff={track_diffs[track.id]}\n        selected={this.state.selected_track == track.id}\n        sector_duration={sector_durations[track.id]}\n        sector_duration_diff={sector_diffs[track.id]}\n        handleRowSelection={this.handleRowSelection.bind(this)}\n      />\n    });\n\n    return (\n      <div className=\"Table\">\n        <Table striped bordered size=\"sm\">\n          <thead>\n            <tr>\n              <th>#</th>\n              <th>Track</th>\n              <th>Time</th>\n              <th>Diff</th>\n              <th>Max speed</th>\n              <th>Avg speed</th>\n              <th>Sector time</th>\n              <th>Sector diff</th>\n            </tr>\n          </thead>\n          <tbody>\n            { rows }\n          </tbody>\n        </Table>\n      </div>\n    );\n  }\n\n  getSectorDuration(sector, track) {\n    let left_micros = 0;\n    let left_min_dist = Number.MAX_VALUE;\n\n    let right_micros = 0;\n    let right_min_dist = Number.MAX_VALUE;\n    track.data.forEach(point => {\n      const dist_left = Math.abs(point.x - sector.left);\n      if (dist_left < left_min_dist) {\n        left_min_dist = dist_left;\n        left_micros = point.micros;\n      }\n\n      const dist_right = Math.abs(point.x - sector.right);\n      if (dist_right < right_min_dist) {\n        right_min_dist = dist_right;\n        right_micros = point.micros;\n      }\n    })\n\n    return right_micros - left_micros;\n  }\n\n  formatDurationDiff(durationDiff) {\n    if (durationDiff > 0) {\n      return '+' + formatDuration(durationDiff);\n    } else {\n      return '-' + formatDuration(Math.abs(durationDiff));\n    }\n  }\n\n  handleRowSelection(track_id) {\n    if (this.state.selected_track == track_id) {\n      this.setState({selected_track: null})\n    } else {\n      this.setState({selected_track: track_id})\n    }\n  }\n}\n\nconst TrackRow = (props) => {\n  let classStr = \"\";\n  if (props.selected) {\n    classStr = \"table-primary\"\n  }\n  return (\n    <tr onClick={(event) => props.handleRowSelection(props.track.id)} className={classStr}>\n      <th scope=\"row\">{props.idx}</th>\n      <td>{props.track.name}</td>\n      <td>{formatDuration(props.track.duration)}</td>\n      <td>{props.track_duration_diff}</td>\n      <td>{props.track.max_speed.toFixed(2)}</td>\n      <td>{props.track.avg_speed.toFixed(2)}</td>\n      <td>{formatNonZeroDuration(props.sector_duration)}</td>\n      <td>{props.sector_duration_diff}</td>\n    </tr>\n  );\n}\n\nconst formatNonZeroDuration = number => {\n  if (number == 0 || number == null) {\n    return \"\"\n  } else {\n    return formatDuration(number)  \n  }\n}\n\nexport default StatsTable;\n","import React from 'react'\nimport scriptLoader from 'react-async-script-loader'\n\nclass GoogleMap extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\t\"map\": null\n\t\t}\n\t}\n\n\tcomponentWillReceiveProps ({ isScriptLoaded, isScriptLoadSucceed }) {\n\t\tif (isScriptLoaded && !this.props.isScriptLoaded ) {\n\t\t\tif (isScriptLoadSucceed) {\n\t\t\t\tthis.initMap();\n\t\t\t} else {\n            \talert(\"Cannot load google maps js\")\n\t\t\t}\n\t\t}\n\t}\n\n\trender() {\n\t\tthis.renderMap();\n\t\treturn (    \n\t\t\t<div id='map' style={{height: \"600px\"}}></div>\n\t\t)\n\t}\n\n\tinitMap() {\n\t\tvar map = new window.google.maps.Map(document.getElementById('map'), {\n\t\t  zoom: 3,\n\t\t  center: {lat: 0, lng: -180},\n\t\t  mapTypeId: 'satellite'\n\t\t});\n\n\t\tthis.setState({\"map\": map});\n\t}\n\n\trenderMap() {\n\t\tif (this.state.map) {\n\t\t\tvar bounds = this.determineMapBounds();\n\t\t\tthis.state.map.fitBounds(bounds);\n\t\t\tthis.props.tracks.forEach(track => {\n\t\t\t\tvar coords = [];\n\t\t\t\ttrack.data.forEach(point => {\n\t\t\t\t\tcoords.push({\n\t\t\t\t\t\tlat: point.lat,\n\t\t\t\t\t\tlng: point.lon\n\t\t\t\t\t});\n\t\t\t\t});\n\n\t\t\t\tvar polyline = new window.google.maps.Polyline({\n\t\t\t\t  path: coords,\n\t\t\t\t  geodesic: true,\n\t\t\t\t  strokeColor: track.color,\n\t\t\t\t  strokeOpacity: 1.0,\n\t\t\t\t  strokeWeight: 2\n\t\t\t\t});\n\n\t\t\t\tpolyline.setMap(this.state.map);\n\t\t\t});\n\t\t}\n\t}\n\n\tdetermineMapBounds() {\n\t\tvar initialPoint = {lat: 0, lng: -180};\n\t\tif (this.props.tracks.length > 0) {\n\t\t\tif (this.props.tracks[0].data.length > 0) {\n\t\t\t\tinitialPoint = {lat: this.props.tracks[0].data[0].lat, lng: this.props.tracks[0].data[0].lon};\n\t\t\t}\n\t\t}\n\n\t\tvar bounds = new window.google.maps.LatLngBounds(initialPoint, initialPoint);\n\t\tthis.props.tracks.forEach(track => {\n\t\t\ttrack.data.forEach(point => {\n\t\t\t\tbounds.extend({lat: point.lat, lng: point.lon});\t\n\t\t\t})\n\t\t});\n\n\t\treturn bounds;\n\t}\n}\n\nexport default scriptLoader(\n  'https://maps.googleapis.com/maps/api/js?key=AIzaSyDIL_0ywQ2g6ShN_GgxhNjfllBSPXGzFFo'\n)(GoogleMap)\n","import React, { Component } from 'react';\nimport './App.css';\nimport { formatDuration } from './utils'\n\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport StatsTable from './StatsTable';\nimport GoogleMap from './GoogleMap'\n\nimport Highcharts from 'highcharts';\n\nclass TracksMap extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      tracks: [],\n    };\n\n    this.loadJson('./data.json', this.onLoadData.bind(this));\n  }\n\n  onLoadData(data) {\n    // Adding string id to each track\n    data.tracks.forEach(function(track, i, arr) {\n      track.id = i.toString();\n    });\n    \n    this.setState({\n      tracks: data.tracks\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"TracksMap\">\n        <Container>\n          <Row>\n            <Col><GoogleMap tracks={this.state.tracks}/></Col>\n          </Row>\n        </Container>\n      </div>\n    )\n  }\n\n  loadJson(filename, callback) {\n    console.log('Loading graph data');\n    var xobj = new XMLHttpRequest();\n    xobj.overrideMimeType(\"application/json\");\n\n    xobj.open('GET', filename, true);\n    xobj.onreadystatechange = function () {\n          if (xobj.readyState == 4 && xobj.status == \"200\") {\n            // Required use of an anonymous callback as .open will NOT return a value but simply returns undefined in asynchronous mode\n            callback(JSON.parse(xobj.responseText));\n          }\n    };\n    xobj.send(null);\n  }\n}\n\nexport default TracksMap;\n","import React, { Component } from 'react';\nimport './App.css';\nimport { formatDuration } from './utils'\n\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport StatsTable from './StatsTable';\nimport GoogleMap from './GoogleMap'\n\nimport Highcharts from 'highcharts';\n\nclass SSComparison extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      tracks: [],\n      sector: null\n    };\n\n    this.loadJson('./data.json', this.onLoadData.bind(this));\n  }\n\n  onLoadData(data) {\n    // Adding string id to each track\n    data.tracks.forEach(function(track, i, arr) {\n      track.id = i.toString();\n    });\n\n    document.title = data.title\n\n    const chart = this.buildGraph(data.tracks, data.title);\n\n    this.setState({\n      title: data.title,\n      tracks: data.tracks,\n      chart: chart\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"SSComparison\">\n        <Container>\n          <Row>\n            <Col id=\"graph\"/>\n          </Row>\n          <Row>\n            <Col><StatsTable tracks={this.state.tracks} sector={this.state.sector}/></Col>\n          </Row>\n          <Row>\n            <Col><GoogleMap tracks={this.state.tracks}/></Col>\n          </Row>\n        </Container>\n      </div>\n    )\n  }\n\n  loadJson(filename, callback) {\n    console.log('Loading graph data');\n    var xobj = new XMLHttpRequest();\n        xobj.overrideMimeType(\"application/json\");\n\n    xobj.open('GET', filename, true);\n    xobj.onreadystatechange = function () {\n          if (xobj.readyState == 4 && xobj.status == \"200\") {\n            // Required use of an anonymous callback as .open will NOT return a value but simply returns undefined in asynchronous mode\n            callback(JSON.parse(xobj.responseText));\n          }\n    };\n    xobj.send(null);\n  }\n\n  buildGraph(series, title) {\n    var names = [];\n\n    // Adding series params and constructing name\n    series.forEach(function(track, i, arr) {\n        names.push(track.name)\n        track.lineWidth = track.line_width;\n        track.turboThreshold = 0;\n    });\n\n    return Highcharts.chart('graph', {\n\n        chart: {\n            zoomType: 'x',\n            events: {\n                selection: this.selectionHandler.bind(this)\n            }\n        },\n\n        title: {\n            text: title\n        },\n\n        subtitle: {\n            text: names.join(' vs ')\n        },\n\n        tooltip: {\n            useHTML: true,\n            formatter: this.tooltipFormatter,\n            valueDecimals: 2,\n            valueSuffix: ' kph',\n            shared: true,\n            crosshairs: true\n        },\n\n        xAxis: {\n            title: {\n                text: 'Distance from start (km)'\n            },\n            type: 'linear',\n        },\n\n        yAxis: {\n            title: {\n                text: 'Speed (kph)'\n            }\n        },\n\n        series: series,\n\n        plotOptions: {\n            line: {\n                allowPointSelect: true,\n                tooltip: {\n                }\n            }\n        },\n\n        credits: {\n            enabled: false\n        },\n\n        exporting: {\n            enabled: false\n        }\n    });\n  }\n\n  tooltipFormatter() {\n      var first = this.points[0];\n      var str = '<b>dist:</b> ' + first.x.toFixed(2) + 'km</br><b>time:</b> ' + formatDuration(first.point.micros);\n\n      this.points.forEach(function (point) {\n          var value = '<b>' + point.series.name + '</b>: ' + point.point.y.toFixed(2) + 'kph ' + formatDuration(point.point.micros);\n          str = str + '</br>' + value;\n      })\n\n      return str\n  }\n\n  selectionHandler(event) {\n      event.preventDefault();\n      let xAxis = this.state.chart.xAxis[0];\n      // var text;\n      // if (event.xAxis) {\n      //     text = 'min: ' + Highcharts.numberFormat(event.xAxis[0].min, 2) + ', max: ' + Highcharts.numberFormat(event.xAxis[0].max, 2);\n      // } else {\n      //     text = 'Selection reset';\n      // }\n      // console.log(text);\n\n      // Drawing selection\n      xAxis.removePlotBand('mask');\n      xAxis.addPlotBand({\n          id: 'mask',\n          from: event.xAxis[0].min,\n          to: event.xAxis[0].max,\n          color: 'rgba(170, 203, 255, 0.4)',\n          events: {\n            'click': this.removeSector.bind(this)\n          }\n      });\n\n      // Updating sector data\n      this.setState({\n        sector: {\n          left: event.xAxis[0].min,\n          right: event.xAxis[0].max,\n        }\n      });\n  }\n\n  removeSector(event) {\n    this.state.chart.xAxis[0].removePlotBand('mask');\n    this.setState({\n      sector: null\n    });\n  }\n}\n\nexport default SSComparison;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport SSComparison from './SSComparison';\nimport TracksMap from './TracksMap';\nimport * as serviceWorker from './serviceWorker';\n\n// ReactDOM.render(<SSComparison />, document.getElementById('root'));\nReactDOM.render(<TracksMap />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}